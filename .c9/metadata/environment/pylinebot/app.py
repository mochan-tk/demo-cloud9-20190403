{"filter":false,"title":"app.py","tooltip":"/pylinebot/app.py","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":84,"column":51},"action":"insert","lines":["# -*- coding: utf-8 -*-","","#  Licensed under the Apache License, Version 2.0 (the \"License\"); you may","#  not use this file except in compliance with the License. You may obtain","#  a copy of the License at","#","#       https://www.apache.org/licenses/LICENSE-2.0","#","#  Unless required by applicable law or agreed to in writing, software","#  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT","#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the","#  License for the specific language governing permissions and limitations","#  under the License.","","from __future__ import unicode_literals","","import os","import sys","from argparse import ArgumentParser","","from flask import Flask, request, abort","from linebot import (","    LineBotApi, WebhookParser",")","from linebot.exceptions import (","    InvalidSignatureError",")","from linebot.models import (","    MessageEvent, TextMessage, TextSendMessage,",")","","app = Flask(__name__)","","# get channel_secret and channel_access_token from your environment variable","channel_secret = os.getenv('LINE_CHANNEL_SECRET', None)","channel_access_token = os.getenv('LINE_CHANNEL_ACCESS_TOKEN', None)","if channel_secret is None:","    print('Specify LINE_CHANNEL_SECRET as environment variable.')","    sys.exit(1)","if channel_access_token is None:","    print('Specify LINE_CHANNEL_ACCESS_TOKEN as environment variable.')","    sys.exit(1)","","line_bot_api = LineBotApi(channel_access_token)","parser = WebhookParser(channel_secret)","","","@app.route(\"/callback\", methods=['POST'])","def callback():","    signature = request.headers['X-Line-Signature']","","    # get request body as text","    body = request.get_data(as_text=True)","    app.logger.info(\"Request body: \" + body)","","    # parse webhook body","    try:","        events = parser.parse(body, signature)","    except InvalidSignatureError:","        abort(400)","","    # if event is MessageEvent and message is TextMessage, then echo text","    for event in events:","        if not isinstance(event, MessageEvent):","            continue","        if not isinstance(event.message, TextMessage):","            continue","","        line_bot_api.reply_message(","            event.reply_token,","            TextSendMessage(text=event.message.text)","        )","","    return 'OK'","","","if __name__ == \"__main__\":","    arg_parser = ArgumentParser(","        usage='Usage: python ' + __file__ + ' [--port <port>] [--help]'","    )","    arg_parser.add_argument('-p', '--port', type=int, default=8000, help='port')","    arg_parser.add_argument('-d', '--debug', default=False, help='debug')","    options = arg_parser.parse_args()","","    app.run(debug=options.debug, port=options.port)"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":84,"column":51},"action":"remove","lines":["# -*- coding: utf-8 -*-","","#  Licensed under the Apache License, Version 2.0 (the \"License\"); you may","#  not use this file except in compliance with the License. You may obtain","#  a copy of the License at","#","#       https://www.apache.org/licenses/LICENSE-2.0","#","#  Unless required by applicable law or agreed to in writing, software","#  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT","#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the","#  License for the specific language governing permissions and limitations","#  under the License.","","from __future__ import unicode_literals","","import os","import sys","from argparse import ArgumentParser","","from flask import Flask, request, abort","from linebot import (","    LineBotApi, WebhookParser",")","from linebot.exceptions import (","    InvalidSignatureError",")","from linebot.models import (","    MessageEvent, TextMessage, TextSendMessage,",")","","app = Flask(__name__)","","# get channel_secret and channel_access_token from your environment variable","channel_secret = os.getenv('LINE_CHANNEL_SECRET', None)","channel_access_token = os.getenv('LINE_CHANNEL_ACCESS_TOKEN', None)","if channel_secret is None:","    print('Specify LINE_CHANNEL_SECRET as environment variable.')","    sys.exit(1)","if channel_access_token is None:","    print('Specify LINE_CHANNEL_ACCESS_TOKEN as environment variable.')","    sys.exit(1)","","line_bot_api = LineBotApi(channel_access_token)","parser = WebhookParser(channel_secret)","","","@app.route(\"/callback\", methods=['POST'])","def callback():","    signature = request.headers['X-Line-Signature']","","    # get request body as text","    body = request.get_data(as_text=True)","    app.logger.info(\"Request body: \" + body)","","    # parse webhook body","    try:","        events = parser.parse(body, signature)","    except InvalidSignatureError:","        abort(400)","","    # if event is MessageEvent and message is TextMessage, then echo text","    for event in events:","        if not isinstance(event, MessageEvent):","            continue","        if not isinstance(event.message, TextMessage):","            continue","","        line_bot_api.reply_message(","            event.reply_token,","            TextSendMessage(text=event.message.text)","        )","","    return 'OK'","","","if __name__ == \"__main__\":","    arg_parser = ArgumentParser(","        usage='Usage: python ' + __file__ + ' [--port <port>] [--help]'","    )","    arg_parser.add_argument('-p', '--port', type=int, default=8000, help='port')","    arg_parser.add_argument('-d', '--debug', default=False, help='debug')","    options = arg_parser.parse_args()","","    app.run(debug=options.debug, port=options.port)"],"id":2},{"start":{"row":0,"column":0},"end":{"row":79,"column":51},"action":"insert","lines":["# -*- coding: utf-8 -*-","","#  Licensed under the Apache License, Version 2.0 (the \"License\"); you may","#  not use this file except in compliance with the License. You may obtain","#  a copy of the License at","#","#       https://www.apache.org/licenses/LICENSE-2.0","#","#  Unless required by applicable law or agreed to in writing, software","#  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT","#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the","#  License for the specific language governing permissions and limitations","#  under the License.","","import os","import sys","from argparse import ArgumentParser","","from flask import Flask, request, abort","from linebot import (","    LineBotApi, WebhookHandler",")","from linebot.exceptions import (","    InvalidSignatureError",")","from linebot.models import (","    MessageEvent, TextMessage, TextSendMessage,",")","","app = Flask(__name__)","","# get channel_secret and channel_access_token from your environment variable","channel_secret = os.getenv('LINE_CHANNEL_SECRET', None)","channel_access_token = os.getenv('LINE_CHANNEL_ACCESS_TOKEN', None)","if channel_secret is None:","    print('Specify LINE_CHANNEL_SECRET as environment variable.')","    sys.exit(1)","if channel_access_token is None:","    print('Specify LINE_CHANNEL_ACCESS_TOKEN as environment variable.')","    sys.exit(1)","","line_bot_api = LineBotApi(channel_access_token)","handler = WebhookHandler(channel_secret)","","","@app.route(\"/callback\", methods=['POST'])","def callback():","    # get X-Line-Signature header value","    signature = request.headers['X-Line-Signature']","","    # get request body as text","    body = request.get_data(as_text=True)","    app.logger.info(\"Request body: \" + body)","","    # handle webhook body","    try:","        handler.handle(body, signature)","    except InvalidSignatureError:","        abort(400)","","    return 'OK'","","","@handler.add(MessageEvent, message=TextMessage)","def message_text(event):","    line_bot_api.reply_message(","        event.reply_token,","        TextSendMessage(text=event.message.text)","    )","","","if __name__ == \"__main__\":","    arg_parser = ArgumentParser(","        usage='Usage: python ' + __file__ + ' [--port <port>] [--help]'","    )","    arg_parser.add_argument('-p', '--port', default=8000, help='port')","    arg_parser.add_argument('-d', '--debug', default=False, help='debug')","    options = arg_parser.parse_args()","","    app.run(debug=options.debug, port=options.port)"]}],[{"start":{"row":75,"column":52},"end":{"row":75,"column":56},"action":"remove","lines":["8000"],"id":3},{"start":{"row":75,"column":52},"end":{"row":75,"column":53},"action":"insert","lines":["3"]},{"start":{"row":75,"column":53},"end":{"row":75,"column":54},"action":"insert","lines":["0"]},{"start":{"row":75,"column":54},"end":{"row":75,"column":55},"action":"insert","lines":["0"]},{"start":{"row":75,"column":55},"end":{"row":75,"column":56},"action":"insert","lines":["0"]}]]},"ace":{"folds":[],"scrolltop":543,"scrollleft":0,"selection":{"start":{"row":75,"column":56},"end":{"row":75,"column":56},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":32,"state":"start","mode":"ace/mode/python"}},"timestamp":1555567581403,"hash":"1e55cf9d54e3fd0c9a7c9cc4b65fefd466c0496c"}